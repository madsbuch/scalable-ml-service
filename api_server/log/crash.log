2021-04-05 09:37:52 =CRASH REPORT====
  crasher:
    initial call: application_master:init/4
    pid: <0.1162.0>
    registered_name: []
    exception exit: {{bad_return,{{'Elixir.ApiServer.Application',start,[normal,[]]},{'EXIT',{#{'__exception__' => true,'__struct__' => 'Elixir.ArgumentError',message => <<"The module Broadway was given as a child to a supervisor\nbut it does not implement child_spec/1.\n\nIf you own the given module, please define a child_spec/1 function\nthat receives an argument and returns a child specification as a map.\nFor example:\n\n    def child_spec(opts) do\n      %{\n        id: __MODULE__,\n        start: {__MODULE__, :start_link, [opts]},\n        type: :worker,\n        restart: :permanent,\n        shutdown: 500\n      }\n    end\n\nNote that \"use Agent\", \"use GenServer\" and so on automatically define\nthis function for you.\n\nHowever, if you don't own the given module and it doesn't implement\nchild_spec/1, instead of passing the module name directly as a supervisor\nchild, you will have to pass a child specification as a map:\n\n    %{\n      id: Broadway,\n      start: {Broadway, :start_link, [arg1, arg2]}\n    }\n\nSee the Supervisor documentation for more information.\n">>},[{'Elixir.Supervisor',init_child,1,[{file,"lib/supervisor.ex"},{line,631}]},{'Elixir.Enum','-map/2-lists^map/1-0-',2,[{file,"lib/enum.ex"},{line,1396}]},{'Elixir.Enum','-map/2-lists^map/1-0-',2,[{file,"lib/enum.ex"},{line,1396}]},{'Elixir.Supervisor',init,2,[{file,"lib/supervisor.ex"},{line,617}]},{'Elixir.Supervisor',start_link,2,[{file,"lib/supervisor.ex"},{line,556}]},{application_master,start_it_old,4,[{file,"application_master.erl"},{line,277}]}]}}}},[{application_master,init,4,[{file,"application_master.erl"},{line,138}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.1161.0>]
    message_queue_len: 1
    messages: [{'EXIT',<0.1163.0>,normal}]
    links: [<0.1161.0>,<0.44.0>]
    dictionary: []
    trap_exit: true
    status: running
    heap_size: 987
    stack_size: 28
    reductions: 229
  neighbours:
2021-04-05 09:37:55 =CRASH REPORT====
  crasher:
    initial call: application_master:init/4
    pid: <0.449.0>
    registered_name: []
    exception exit: {{bad_return,{{'Elixir.ApiServer.Application',start,[normal,[]]},{'EXIT',{#{'__exception__' => true,'__struct__' => 'Elixir.ArgumentError',message => <<"The module Broadway was given as a child to a supervisor\nbut it does not implement child_spec/1.\n\nIf you own the given module, please define a child_spec/1 function\nthat receives an argument and returns a child specification as a map.\nFor example:\n\n    def child_spec(opts) do\n      %{\n        id: __MODULE__,\n        start: {__MODULE__, :start_link, [opts]},\n        type: :worker,\n        restart: :permanent,\n        shutdown: 500\n      }\n    end\n\nNote that \"use Agent\", \"use GenServer\" and so on automatically define\nthis function for you.\n\nHowever, if you don't own the given module and it doesn't implement\nchild_spec/1, instead of passing the module name directly as a supervisor\nchild, you will have to pass a child specification as a map:\n\n    %{\n      id: Broadway,\n      start: {Broadway, :start_link, [arg1, arg2]}\n    }\n\nSee the Supervisor documentation for more information.\n">>},[{'Elixir.Supervisor',init_child,1,[{file,"lib/supervisor.ex"},{line,631}]},{'Elixir.Enum','-map/2-lists^map/1-0-',2,[{file,"lib/enum.ex"},{line,1396}]},{'Elixir.Enum','-map/2-lists^map/1-0-',2,[{file,"lib/enum.ex"},{line,1396}]},{'Elixir.Supervisor',init,2,[{file,"lib/supervisor.ex"},{line,617}]},{'Elixir.Supervisor',start_link,2,[{file,"lib/supervisor.ex"},{line,556}]},{application_master,start_it_old,4,[{file,"application_master.erl"},{line,277}]}]}}}},[{application_master,init,4,[{file,"application_master.erl"},{line,138}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.448.0>]
    message_queue_len: 1
    messages: [{'EXIT',<0.450.0>,normal}]
    links: [<0.448.0>,<0.44.0>]
    dictionary: []
    trap_exit: true
    status: running
    heap_size: 987
    stack_size: 28
    reductions: 233
  neighbours:
2021-04-05 09:38:35 =CRASH REPORT====
  crasher:
    initial call: cowboy_stream_h:request_process/3
    pid: <0.635.0>
    registered_name: []
    exception exit: {{{#{'__exception__' => true,'__struct__' => 'Elixir.MatchError',term => {error,econnrefused}},[{'Elixir.ApiServerWeb.TranslationRPC',call,1,[{file,"lib/api_server_web/translations_rpc.ex"},{line,9}]},{'Elixir.ApiServerWeb.Resolvers.Translation',translate,3,[{file,"lib/api_server_web/resolvers/translation.ex"},{line,3}]},{'Elixir.Absinthe.Resolution',call,2,[{file,"lib/absinthe/resolution.ex"},{line,209}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},46310},pid => <0.624.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 5,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.635.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}},[]}
    ancestors: [<0.624.0>,<0.516.0>,<0.515.0>,'Elixir.ApiServerWeb.Endpoint','Elixir.ApiServer.Supervisor',<0.460.0>]
    message_queue_len: 0
    messages: []
    links: [<0.624.0>]
    dictionary: [{'$logger_metadata$',#{request_id => <<"FnLmMTf6pZfg5Y8AAAAC">>}},{{'Elixir.ApiServer.Repo',dynamic_repo},'Elixir.ApiServer.Repo'},{gen_server_call_timeout,60000}]
    trap_exit: false
    status: running
    heap_size: 17731
    stack_size: 28
    reductions: 98575
  neighbours:
2021-04-05 09:38:35 =ERROR REPORT====
Ranch listener 'Elixir.ApiServerWeb.Endpoint.HTTP', connection process <0.624.0>, stream 5 had its request process <0.635.0> exit with reason {{#{'__exception__' => true,'__struct__' => 'Elixir.MatchError',term => {error,econnrefused}},[{'Elixir.ApiServerWeb.TranslationRPC',call,1,[{file,"lib/api_server_web/translations_rpc.ex"},{line,9}]},{'Elixir.ApiServerWeb.Resolvers.Translation',translate,3,[{file,"lib/api_server_web/resolvers/translation.ex"},{line,3}]},{'Elixir.Absinthe.Resolution',call,2,[{file,"lib/absinthe/resolution.ex"},{line,209}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},46310},pid => <0.624.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 5,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.635.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}} and stacktrace []
2021-04-05 09:56:45 =CRASH REPORT====
  crasher:
    initial call: cowboy_stream_h:request_process/3
    pid: <0.652.0>
    registered_name: []
    exception exit: {{{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: :ok}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 1,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.652.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}},[]}
    ancestors: [<0.651.0>,<0.506.0>,<0.505.0>,'Elixir.ApiServerWeb.Endpoint','Elixir.ApiServer.Supervisor',<0.450.0>]
    message_queue_len: 1
    messages: [{basic_consume_ok,#{consumer_tag => <<"amq.ctag-vUdMBuEkKTQQ6AFIBE24yQ">>}}]
    links: [<0.651.0>]
    dictionary: [{gen_server_call_timeout,60000},{{'Elixir.ApiServer.Repo',dynamic_repo},'Elixir.ApiServer.Repo'},{'$logger_metadata$',#{request_id => <<"FnLnLvxh0CGjtZsAAAaI">>}}]
    trap_exit: false
    status: running
    heap_size: 17731
    stack_size: 28
    reductions: 100242
  neighbours:
2021-04-05 09:56:45 =ERROR REPORT====
Ranch listener 'Elixir.ApiServerWeb.Endpoint.HTTP', connection process <0.651.0>, stream 1 had its request process <0.652.0> exit with reason {{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: :ok}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 1,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.652.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}} and stacktrace []
2021-04-05 09:56:54 =CRASH REPORT====
  crasher:
    initial call: cowboy_stream_h:request_process/3
    pid: <0.694.0>
    registered_name: []
    exception exit: {{{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 2,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.694.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}},[]}
    ancestors: [<0.651.0>,<0.506.0>,<0.505.0>,'Elixir.ApiServerWeb.Endpoint','Elixir.ApiServer.Supervisor',<0.450.0>]
    message_queue_len: 1
    messages: [{basic_consume_ok,#{consumer_tag => <<"amq.ctag-PlvfvlIWFwaWKcrxG5o_wA">>}}]
    links: [<0.651.0>]
    dictionary: [{gen_server_call_timeout,60000},{{'Elixir.ApiServer.Repo',dynamic_repo},'Elixir.ApiServer.Repo'},{'$logger_metadata$',#{request_id => <<"FnLnMQ-eL5dxNeEAAAxB">>}}]
    trap_exit: false
    status: running
    heap_size: 17731
    stack_size: 28
    reductions: 97914
  neighbours:
2021-04-05 09:56:54 =ERROR REPORT====
Ranch listener 'Elixir.ApiServerWeb.Endpoint.HTTP', connection process <0.651.0>, stream 2 had its request process <0.694.0> exit with reason {{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 2,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.694.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}} and stacktrace []
2021-04-05 09:57:20 =CRASH REPORT====
  crasher:
    initial call: cowboy_stream_h:request_process/3
    pid: <0.736.0>
    registered_name: []
    exception exit: {{{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 3,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.736.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}},[]}
    ancestors: [<0.651.0>,<0.506.0>,<0.505.0>,'Elixir.ApiServerWeb.Endpoint','Elixir.ApiServer.Supervisor',<0.450.0>]
    message_queue_len: 1
    messages: [{basic_consume_ok,#{consumer_tag => <<"amq.ctag-RRHgcXgCCRnhcFqnbOUmkQ">>}}]
    links: [<0.651.0>]
    dictionary: [{gen_server_call_timeout,60000},{{'Elixir.ApiServer.Repo',dynamic_repo},'Elixir.ApiServer.Repo'},{'$logger_metadata$',#{request_id => <<"FnLnNzEvJf16LgUAAAAG">>}}]
    trap_exit: false
    status: running
    heap_size: 17731
    stack_size: 28
    reductions: 100244
  neighbours:
2021-04-05 09:57:20 =ERROR REPORT====
Ranch listener 'Elixir.ApiServerWeb.Endpoint.HTTP', connection process <0.651.0>, stream 3 had its request process <0.736.0> exit with reason {{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 3,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.736.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}} and stacktrace []
2021-04-05 09:57:21 =CRASH REPORT====
  crasher:
    initial call: cowboy_stream_h:request_process/3
    pid: <0.778.0>
    registered_name: []
    exception exit: {{{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 4,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.778.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}},[]}
    ancestors: [<0.651.0>,<0.506.0>,<0.505.0>,'Elixir.ApiServerWeb.Endpoint','Elixir.ApiServer.Supervisor',<0.450.0>]
    message_queue_len: 1
    messages: [{basic_consume_ok,#{consumer_tag => <<"amq.ctag-nIihFqnBgmAFLSmrlLHNqw">>}}]
    links: [<0.651.0>]
    dictionary: [{gen_server_call_timeout,60000},{{'Elixir.ApiServer.Repo',dynamic_repo},'Elixir.ApiServer.Repo'},{'$logger_metadata$',#{request_id => <<"FnLnN4R2lYC_5qQAAAEG">>}}]
    trap_exit: false
    status: running
    heap_size: 17731
    stack_size: 28
    reductions: 100530
  neighbours:
2021-04-05 09:57:21 =ERROR REPORT====
Ranch listener 'Elixir.ApiServerWeb.Endpoint.HTTP', connection process <0.651.0>, stream 4 had its request process <0.778.0> exit with reason {{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 4,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.778.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}} and stacktrace []
2021-04-05 09:57:34 =CRASH REPORT====
  crasher:
    initial call: cowboy_stream_h:request_process/3
    pid: <0.795.0>
    registered_name: []
    exception exit: {{{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 5,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.795.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}},[]}
    ancestors: [<0.651.0>,<0.506.0>,<0.505.0>,'Elixir.ApiServerWeb.Endpoint','Elixir.ApiServer.Supervisor',<0.450.0>]
    message_queue_len: 1
    messages: [{basic_consume_ok,#{consumer_tag => <<"amq.ctag-Q_pVGEtaLROOtj3NhlNl0w">>}}]
    links: [<0.651.0>]
    dictionary: [{gen_server_call_timeout,60000},{{'Elixir.ApiServer.Repo',dynamic_repo},'Elixir.ApiServer.Repo'},{'$logger_metadata$',#{request_id => <<"FnLnOmLIYGX5VsoAAAFF">>}}]
    trap_exit: false
    status: running
    heap_size: 17731
    stack_size: 28
    reductions: 100516
  neighbours:
2021-04-05 09:57:34 =ERROR REPORT====
Ranch listener 'Elixir.ApiServerWeb.Endpoint.HTTP', connection process <0.651.0>, stream 5 had its request process <0.795.0> exit with reason {{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 5,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.795.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}} and stacktrace []
2021-04-05 09:57:38 =CRASH REPORT====
  crasher:
    initial call: cowboy_stream_h:request_process/3
    pid: <0.811.0>
    registered_name: []
    exception exit: {{{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 6,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.811.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}},[]}
    ancestors: [<0.651.0>,<0.506.0>,<0.505.0>,'Elixir.ApiServerWeb.Endpoint','Elixir.ApiServer.Supervisor',<0.450.0>]
    message_queue_len: 1
    messages: [{basic_consume_ok,#{consumer_tag => <<"amq.ctag-UaVbrmSCZbNrj68TNj8d6Q">>}}]
    links: [<0.651.0>]
    dictionary: [{gen_server_call_timeout,60000},{{'Elixir.ApiServer.Repo',dynamic_repo},'Elixir.ApiServer.Repo'},{'$logger_metadata$',#{request_id => <<"FnLnO1-ynApi0PgAAAIC">>}}]
    trap_exit: false
    status: running
    heap_size: 17731
    stack_size: 28
    reductions: 98221
  neighbours:
2021-04-05 09:57:38 =ERROR REPORT====
Ranch listener 'Elixir.ApiServerWeb.Endpoint.HTTP', connection process <0.651.0>, stream 6 had its request process <0.811.0> exit with reason {{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 6,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.811.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}} and stacktrace []
2021-04-05 09:58:00 =CRASH REPORT====
  crasher:
    initial call: cowboy_stream_h:request_process/3
    pid: <0.827.0>
    registered_name: []
    exception exit: {{{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 7,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.827.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}},[]}
    ancestors: [<0.651.0>,<0.506.0>,<0.505.0>,'Elixir.ApiServerWeb.Endpoint','Elixir.ApiServer.Supervisor',<0.450.0>]
    message_queue_len: 1
    messages: [{basic_consume_ok,#{consumer_tag => <<"amq.ctag-JZDV3-hVscVsd8jk8Yssqg">>}}]
    links: [<0.651.0>]
    dictionary: [{gen_server_call_timeout,60000},{{'Elixir.ApiServer.Repo',dynamic_repo},'Elixir.ApiServer.Repo'},{'$logger_metadata$',#{request_id => <<"FnLnQH2q00kC7rwAAAJF">>}}]
    trap_exit: false
    status: running
    heap_size: 17731
    stack_size: 28
    reductions: 100581
  neighbours:
2021-04-05 09:58:00 =ERROR REPORT====
Ranch listener 'Elixir.ApiServerWeb.Endpoint.HTTP', connection process <0.651.0>, stream 7 had its request process <0.827.0> exit with reason {{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 7,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.827.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}} and stacktrace []
2021-04-05 09:58:01 =CRASH REPORT====
  crasher:
    initial call: cowboy_stream_h:request_process/3
    pid: <0.843.0>
    registered_name: []
    exception exit: {{{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 8,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.843.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}},[]}
    ancestors: [<0.651.0>,<0.506.0>,<0.505.0>,'Elixir.ApiServerWeb.Endpoint','Elixir.ApiServer.Supervisor',<0.450.0>]
    message_queue_len: 1
    messages: [{basic_consume_ok,#{consumer_tag => <<"amq.ctag-YoWPguMgZADy_xRUwRSgxA">>}}]
    links: [<0.651.0>]
    dictionary: [{gen_server_call_timeout,60000},{{'Elixir.ApiServer.Repo',dynamic_repo},'Elixir.ApiServer.Repo'},{'$logger_metadata$',#{request_id => <<"FnLnQMIommF3YwcAAAJC">>}}]
    trap_exit: false
    status: running
    heap_size: 17731
    stack_size: 28
    reductions: 98283
  neighbours:
2021-04-05 09:58:01 =ERROR REPORT====
Ranch listener 'Elixir.ApiServerWeb.Endpoint.HTTP', connection process <0.651.0>, stream 8 had its request process <0.843.0> exit with reason {{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 8,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.843.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}} and stacktrace []
2021-04-05 09:58:03 =CRASH REPORT====
  crasher:
    initial call: cowboy_stream_h:request_process/3
    pid: <0.859.0>
    registered_name: []
    exception exit: {{{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 9,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.859.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}},[]}
    ancestors: [<0.651.0>,<0.506.0>,<0.505.0>,'Elixir.ApiServerWeb.Endpoint','Elixir.ApiServer.Supervisor',<0.450.0>]
    message_queue_len: 1
    messages: [{basic_consume_ok,#{consumer_tag => <<"amq.ctag-dgd08pUBk_5PryJH23SlCg">>}}]
    links: [<0.651.0>]
    dictionary: [{gen_server_call_timeout,60000},{{'Elixir.ApiServer.Repo',dynamic_repo},'Elixir.ApiServer.Repo'},{'$logger_metadata$',#{request_id => <<"FnLnQSsFIQmWCEUAAAAK">>}}]
    trap_exit: false
    status: running
    heap_size: 17731
    stack_size: 28
    reductions: 98266
  neighbours:
2021-04-05 09:58:03 =ERROR REPORT====
Ranch listener 'Elixir.ApiServerWeb.Endpoint.HTTP', connection process <0.651.0>, stream 9 had its request process <0.859.0> exit with reason {{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47426},pid => <0.651.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 9,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.859.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}} and stacktrace []
2021-04-05 09:58:11 =CRASH REPORT====
  crasher:
    initial call: cowboy_stream_h:request_process/3
    pid: <0.618.0>
    registered_name: []
    exception exit: {{{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47504},pid => <0.614.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 2,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.618.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}},[]}
    ancestors: [<0.614.0>,<0.506.0>,<0.505.0>,'Elixir.ApiServerWeb.Endpoint','Elixir.ApiServer.Supervisor',<0.450.0>]
    message_queue_len: 1
    messages: [{basic_consume_ok,#{consumer_tag => <<"amq.ctag--oY8QZ9dsDJzbC6dPJI2pg">>}}]
    links: [<0.614.0>]
    dictionary: [{'$logger_metadata$',#{request_id => <<"FnLnQvZhy1fckTMAAAAH">>}},{gen_server_call_timeout,60000},{{'Elixir.ApiServer.Repo',dynamic_repo},'Elixir.ApiServer.Repo'}]
    trap_exit: false
    status: running
    heap_size: 17731
    stack_size: 28
    reductions: 102781
  neighbours:
2021-04-05 09:58:11 =ERROR REPORT====
Ranch listener 'Elixir.ApiServerWeb.Endpoint.HTTP', connection process <0.614.0>, stream 2 had its request process <0.618.0> exit with reason {{#{'__exception__' => true,'__struct__' => 'Elixir.Absinthe.ExecutionError',message => <<"Invalid value returned from resolver.\n\nResolving field:\n\n    translate\n\nDefined at:\n\n    /home/mads/mygit/scalable-ml-service/api_server/lib/api_server_web/schema.ex:11\n\nResolving on:\n\n    %{}\n\nGot value:\n\n    %{translated_string: \"Lala\"}\n\n...\n\nDid you forget to return a valid `{:ok, any}` | `{:error, error_value}` tuple?\n\n...\n\nThe result must be one of the following...\n\n## For a data result\n\n`{:ok, any}` result will do.\n\n### Examples:\n\nA simple integer result:\n\n    {:ok, 1}\n\nSomething more complex:\n\n    {:ok, %Model.Thing{some: %{complex: :data}}}\n\n## For an error result\n\nOne or more errors for a field can be returned in a single `{:error, error_value}` tuple.\n\n`error_value` can be:\n- A simple error message string.\n- A map containing `:message` key, plus any additional serializable metadata.\n- A keyword list containing a `:message` key, plus any additional serializable metadata.\n- A list containing multiple of any/all of these.\n- Any other value compatible with `to_string/1`.\n\n### Examples\n\nA simple error message:\n\n    {:error, \"Something bad happened\"}\n\nMultiple error messages:\n\n    {:error, [\"Something bad\", \"Even worse\"]\n\nSingle custom errors (note the required `:message` keys):\n\n    {:error, message: \"Unknown user\", code: 21}\n    {:error, %{message: \"A database error occurred\", details: format_db_error(some_value)}}\n\nThree errors of mixed types:\n\n    {:error, [\"Simple message\", [message: \"A keyword list error\", code: 1], %{message: \"A map error\"}]}\n\nGeneric handler for interoperability with errors from other libraries:\n\n    {:error, :foo}\n    {:error, 1.0}\n    {:error, 2}\n\n## To activate a plugin\n\n`{:plugin, NameOfPluginModule, term}` to activate a plugin.\n\nSee `Absinthe.Resolution.Plugin` for more information.\n\n\n">>},[{'Elixir.Absinthe.Resolution',put_result,2,[{file,"lib/absinthe/resolution.ex"},{line,285}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',reduce_resolution,1,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,230}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_field,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,185}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',do_resolve_fields,6,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,170}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',walk_result,5,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,88}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',perform_resolution,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,67}]},{'Elixir.Absinthe.Phase.Document.Execution.Resolution',resolve_current,3,[{file,"lib/absinthe/phase/document/execution/resolution.ex"},{line,24}]},{'Elixir.Absinthe.Pipeline',run_phase,3,[{file,"lib/absinthe/pipeline.ex"},{line,369}]},{'Elixir.Absinthe.Plug',run_query,4,[{file,"lib/absinthe/plug.ex"},{line,531}]},{'Elixir.Absinthe.Plug',call,2,[{file,"lib/absinthe/plug.ex"},{line,290}]},{'Elixir.Phoenix.Router.Route',call,2,[{file,"lib/phoenix/router/route.ex"},{line,41}]},{'Elixir.Phoenix.Router','__call__',2,[{file,"lib/phoenix/router.ex"},{line,352}]},{'Elixir.ApiServerWeb.Endpoint',plug_builder_call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.ApiServerWeb.Endpoint','call (overridable 3)',2,[{file,"lib/plug/debugger.ex"},{line,136}]},{'Elixir.ApiServerWeb.Endpoint',call,2,[{file,"lib/api_server_web/endpoint.ex"},{line,1}]},{'Elixir.Phoenix.Endpoint.Cowboy2Handler',init,4,[{file,"lib/phoenix/endpoint/cowboy2_handler.ex"},{line,65}]},{cowboy_handler,execute,2,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_handler.erl"},{line,37}]},{cowboy_stream_h,execute,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,300}]},{cowboy_stream_h,request_process,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/cowboy/src/cowboy_stream_h.erl"},{line,291}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]},{'Elixir.ApiServerWeb.Endpoint',call,[#{'__struct__' => 'Elixir.Plug.Conn',adapter => {'Elixir.Plug.Cowboy.Conn',#{bindings => #{},body_length => 143,cert => undefined,has_body => true,headers => #{<<"accept">> => <<"application/json">>,<<"accept-encoding">> => <<"gzip, deflate, br">>,<<"accept-language">> => <<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>,<<"connection">> => <<"keep-alive">>,<<"content-length">> => <<"143">>,<<"content-type">> => <<"application/json">>,<<"cookie">> => <<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>,<<"dnt">> => <<"1">>,<<"host">> => <<"localhost:4000">>,<<"origin">> => <<"http://localhost:4000">>,<<"referer">> => <<"http://localhost:4000/api/graphiql">>,<<"sec-ch-ua">> => <<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>,<<"sec-ch-ua-mobile">> => <<"?0">>,<<"sec-fetch-dest">> => <<"empty">>,<<"sec-fetch-mode">> => <<"cors">>,<<"sec-fetch-site">> => <<"same-origin">>,<<"user-agent">> => <<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>},host => <<"localhost">>,host_info => undefined,method => <<"POST">>,path => <<"/api/graphiql">>,path_info => undefined,peer => {{127,0,0,1},47504},pid => <0.614.0>,port => 4000,qs => <<>>,ref => 'Elixir.ApiServerWeb.Endpoint.HTTP',scheme => <<"http">>,sock => {{127,0,0,1},4000},streamid => 2,version => 'HTTP/1.1'}},assigns => #{},before_send => [],body_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => body_params},cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},halted => false,host => <<"localhost">>,method => <<"POST">>,owner => <0.618.0>,params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => params},path_info => [<<"api">>,<<"graphiql">>],path_params => #{},port => 4000,private => #{},query_params => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => query_params},query_string => <<>>,remote_ip => {127,0,0,1},req_cookies => #{'__struct__' => 'Elixir.Plug.Conn.Unfetched',aspect => cookies},req_headers => [{<<"accept">>,<<"application/json">>},{<<"accept-encoding">>,<<"gzip, deflate, br">>},{<<"accept-language">>,<<"en-GB,en-US;q=0.9,en;q=0.8,da;q=0.7">>},{<<"connection">>,<<"keep-alive">>},{<<"content-length">>,<<"143">>},{<<"content-type">>,<<"application/json">>},{<<"cookie">>,<<"ajs_anonymous_id=%22df323005-470f-403a-bcb3-f200991cd5ca%22; intercom-id-uxo0c376=c2ea3523-4227-4aa1-8341-56e1e7d0cdd2; intercom-id-x85uh933=2052050d-87cb-41a1-867a-9604e082d952; adminer_key=9dd563f0722702127b8068a52f3ad86c; adminer_permanent=; adminer_sid=827f022fc5f345e54146031999037a3b; _api_service_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYVjh5Z2VYNUFqU1Y5Zkc4Rms0N1hEVzNE.1DOH3j9WVgcc3yO78YyxHwz6sZTOVDdbfkRXC0OUJrE; _api_server_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYTVAzOGs0clFuLU42STY5ZXFYU3dleGRY.ApHZxJ9Pt3XwfjjKB75F2MerwtlBlobOR0DuhkIEWvg; m=2258:Z3Vlc3Q6Z3Vlc3Q%253D">>},{<<"dnt">>,<<"1">>},{<<"host">>,<<"localhost:4000">>},{<<"origin">>,<<"http://localhost:4000">>},{<<"referer">>,<<"http://localhost:4000/api/graphiql">>},{<<"sec-ch-ua">>,<<"\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"">>},{<<"sec-ch-ua-mobile">>,<<"?0">>},{<<"sec-fetch-dest">>,<<"empty">>},{<<"sec-fetch-mode">>,<<"cors">>},{<<"sec-fetch-site">>,<<"same-origin">>},{<<"user-agent">>,<<"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36">>}],request_path => <<"/api/graphiql">>,resp_body => nil,resp_cookies => #{},resp_headers => [{<<"cache-control">>,<<"max-age=0, private, must-revalidate">>}],scheme => http,script_name => [],secret_key_base => nil,state => unset,status => nil},[]]}} and stacktrace []
2021-04-05 10:03:31 =ERROR REPORT====
** Generic server <0.656.0> terminating
** Last message in was {consumer_call,{'basic.deliver',<<"amq.ctag-bE9nLE2-Z08aS4mOpf_-Sw">>,2,false,<<>>,<<"amq.gen-cNW8U7kKTOLVm5FejkS-iw">>},{amqp_msg,{'P_basic',undefined,undefined,[{<<"correlation_id">>,longstr,<<"LTU3NjQ2MDc1MjMwMzQyMzM1Mw====">>}],1,undefined,undefined,undefined,undefined,undefined,undefined,undefined,undefined,undefined,undefined},<<"her er resultatet">>}}
** When Server state == {state,amqp_selective_consumer,{state,#{},undefined,#{},none}}
** Reason for termination == 
** unexpected_delivery_and_no_default_consumer
2021-04-05 10:03:31 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_consumer:init/1
    pid: <0.656.0>
    registered_name: []
    exception exit: {unexpected_delivery_and_no_default_consumer,[{gen_server2,terminate,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/rabbit_common/src/gen_server2.erl"},{line,1183}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.655.0>,<0.649.0>,<0.647.0>,<0.646.0>,amqp_sup,<0.386.0>]
    message_queue_len: 0
    messages: []
    links: [<0.655.0>]
    dictionary: [{process_name,{amqp_gen_consumer,{<<"client 127.0.0.1:38491 -> 127.0.0.1:5672">>,1}}}]
    trap_exit: false
    status: running
    heap_size: 987
    stack_size: 28
    reductions: 5332
  neighbours:
2021-04-05 10:03:31 =SUPERVISOR REPORT====
     Supervisor: {<0.655.0>,amqp_channel_sup}
     Context:    child_terminated
     Reason:     unexpected_delivery_and_no_default_consumer
     Offender:   [{pid,<0.656.0>},{id,gen_consumer},{mfargs,{amqp_gen_consumer,start_link,[amqp_selective_consumer,[],{<<"client 127.0.0.1:38491 -> 127.0.0.1:5672">>,1}]}},{restart_type,intrinsic},{shutdown,30000},{child_type,worker}]

2021-04-05 10:03:31 =SUPERVISOR REPORT====
     Supervisor: {<0.655.0>,amqp_channel_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.656.0>},{id,gen_consumer},{mfargs,{amqp_gen_consumer,start_link,[amqp_selective_consumer,[],{<<"client 127.0.0.1:38491 -> 127.0.0.1:5672">>,1}]}},{restart_type,intrinsic},{shutdown,30000},{child_type,worker}]

2021-04-05 10:08:37 =ERROR REPORT====
** Generic server <0.630.0> terminating
** Last message in was {consumer_call,{'basic.deliver',<<"amq.ctag-m5nP_VqpFsd2l6m8rTSFIw">>,1,false,<<>>,<<"amq.gen-YO629Yz5VSDeK2x6zgBR2A">>},{amqp_msg,{'P_basic',undefined,undefined,undefined,undefined,undefined,<<"LTU3NjQ2MDc1MjMwMzQyMzQ4MA==">>,undefined,undefined,undefined,undefined,undefined,undefined,undefined,undefined},<<"lala b'Hej' lala">>}}
** When Server state == {state,amqp_selective_consumer,{state,#{},undefined,#{},none}}
** Reason for termination == 
** unexpected_delivery_and_no_default_consumer
2021-04-05 10:08:37 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_consumer:init/1
    pid: <0.630.0>
    registered_name: []
    exception exit: {unexpected_delivery_and_no_default_consumer,[{gen_server2,terminate,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/rabbit_common/src/gen_server2.erl"},{line,1183}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.629.0>,<0.623.0>,<0.621.0>,<0.620.0>,amqp_sup,<0.360.0>]
    message_queue_len: 0
    messages: []
    links: [<0.629.0>]
    dictionary: [{process_name,{amqp_gen_consumer,{<<"client 127.0.0.1:50285 -> 127.0.0.1:5672">>,1}}}]
    trap_exit: false
    status: running
    heap_size: 2586
    stack_size: 28
    reductions: 4908
  neighbours:
2021-04-05 10:08:37 =SUPERVISOR REPORT====
     Supervisor: {<0.629.0>,amqp_channel_sup}
     Context:    child_terminated
     Reason:     unexpected_delivery_and_no_default_consumer
     Offender:   [{pid,<0.630.0>},{id,gen_consumer},{mfargs,{amqp_gen_consumer,start_link,[amqp_selective_consumer,[],{<<"client 127.0.0.1:50285 -> 127.0.0.1:5672">>,1}]}},{restart_type,intrinsic},{shutdown,30000},{child_type,worker}]

2021-04-05 10:08:37 =SUPERVISOR REPORT====
     Supervisor: {<0.629.0>,amqp_channel_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.630.0>},{id,gen_consumer},{mfargs,{amqp_gen_consumer,start_link,[amqp_selective_consumer,[],{<<"client 127.0.0.1:50285 -> 127.0.0.1:5672">>,1}]}},{restart_type,intrinsic},{shutdown,30000},{child_type,worker}]

2021-04-05 10:12:38 =ERROR REPORT====
** Generic server <0.1210.0> terminating
** Last message in was {consumer_call,{'basic.deliver',<<"amq.ctag-Pmb_GyxGiEwuTdv4CV3Rrw">>,1,false,<<>>,<<"amq.gen-u2IZtORB3txAdFHgeGSzbQ">>},{amqp_msg,{'P_basic',undefined,undefined,undefined,undefined,undefined,<<"LTU3NjQ2MDc1MjMwMzQyMTgyMg==">>,undefined,undefined,undefined,undefined,undefined,undefined,undefined,undefined},<<"lala b'Hej' lala 8">>}}
** When Server state == {state,amqp_selective_consumer,{state,#{},undefined,#{},none}}
** Reason for termination == 
** unexpected_delivery_and_no_default_consumer
2021-04-05 10:12:38 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_consumer:init/1
    pid: <0.1210.0>
    registered_name: []
    exception exit: {unexpected_delivery_and_no_default_consumer,[{gen_server2,terminate,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/rabbit_common/src/gen_server2.erl"},{line,1183}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.1209.0>,<0.1203.0>,<0.1201.0>,<0.1200.0>,amqp_sup,<0.360.0>]
    message_queue_len: 0
    messages: []
    links: [<0.1209.0>]
    dictionary: [{process_name,{amqp_gen_consumer,{<<"client 127.0.0.1:52803 -> 127.0.0.1:5672">>,1}}}]
    trap_exit: false
    status: running
    heap_size: 1598
    stack_size: 28
    reductions: 4724
  neighbours:
2021-04-05 10:12:38 =SUPERVISOR REPORT====
     Supervisor: {<0.1209.0>,amqp_channel_sup}
     Context:    child_terminated
     Reason:     unexpected_delivery_and_no_default_consumer
     Offender:   [{pid,<0.1210.0>},{id,gen_consumer},{mfargs,{amqp_gen_consumer,start_link,[amqp_selective_consumer,[],{<<"client 127.0.0.1:52803 -> 127.0.0.1:5672">>,1}]}},{restart_type,intrinsic},{shutdown,30000},{child_type,worker}]

2021-04-05 10:12:38 =SUPERVISOR REPORT====
     Supervisor: {<0.1209.0>,amqp_channel_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.1210.0>},{id,gen_consumer},{mfargs,{amqp_gen_consumer,start_link,[amqp_selective_consumer,[],{<<"client 127.0.0.1:52803 -> 127.0.0.1:5672">>,1}]}},{restart_type,intrinsic},{shutdown,30000},{child_type,worker}]

2021-04-05 10:12:38 =ERROR REPORT====
** Generic server <0.1211.0> terminating 
** Last message in was {'$gen_cast',{method,{'basic.deliver',<<"amq.ctag-Pmb_GyxGiEwuTdv4CV3Rrw">>,1,false,<<>>,<<"amq.gen-u2IZtORB3txAdFHgeGSzbQ">>},{content,60,none,<<4,0,28,76,84,85,51,78,106,81,50,77,68,99,49,77,106,77,119,77,122,81,121,77,84,103,121,77,103,61,61>>,rabbit_framing_amqp_0_9_1,[<<"lala b'Hej' lala 8">>]},noflow}}
** When Server state == {state,1,<0.1202.0>,<0.1210.0>,network,{[],[]},false,<0.1212.0>,none,none,0,true,none,{0,nil},{0,nil},true,false}
** Reason for termination ==
** {{unexpected_delivery_and_no_default_consumer,{gen_server2,call,[<0.1210.0>,{consumer_call,{'basic.deliver',<<"amq.ctag-Pmb_GyxGiEwuTdv4CV3Rrw">>,1,false,<<>>,<<"amq.gen-u2IZtORB3txAdFHgeGSzbQ">>},{amqp_msg,{'P_basic',undefined,undefined,undefined,undefined,undefined,<<"LTU3NjQ2MDc1MjMwMzQyMTgyMg==">>,undefined,undefined,undefined,undefined,undefined,undefined,undefined,undefined},<<"lala b'Hej' lala 8">>}},60000]}},[{gen_server2,call,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/rabbit_common/src/gen_server2.erl"},{line,346}]},{amqp_channel,handle_method_from_server1,3,[{file,"/home/mads/mygit/scalable-ml-service/api_server/deps/amqp_client/src/amqp_channel.erl"},{line,762}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,680}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,756}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
